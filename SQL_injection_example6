exec(`CREATE TABLE users (email TEXT, admin INTEGER NOT NULL DEFAULT 0)`);
exec(`INSERT INTO users (email) VALUES ('innocent@example.com')`);

function register(email) {
  exec(`INSERT INTO users (email) VALUES ('` + email + `')`);
}

register("attacker@example.com'); UPDATE users SET admin = 1 WHERE email = 'attacker@example.com';--");

exec(`SELECT * FROM users`);


[{email: 'innocent@example.com', admin: 0}, {email: 'attacker@example.com', admin: 1}]


/* 
register(   "    attacker@example.com'); UPDATE users SET admin = 1 WHERE email = 'attacker@example.com';--      ");

SQL injection attacks are subtle, but the practical takeaway from this lesson is simple. 
Never concatenate SQL strings, even if it seems safe. Write your SQL in a single, self-contained string. If you need to pass 
dynamic data to your INSERTs, SELECTs, etc., use bind parameters. 
Bind parameters are carefully implemented by the database authors to inject values securely
*/
